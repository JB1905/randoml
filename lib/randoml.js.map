{"version":3,"sources":["webpack://RandoML/webpack/universalModuleDefinition","webpack://RandoML/webpack/bootstrap","webpack://RandoML/./src/randoml.ts","webpack://RandoML/webpack/runtime/make namespace object","webpack://RandoML/webpack/runtime/define property getter"],"names":["RandoML","min","max","exclude","held","randomNumber","Math","floor","random","map","item","randomize","localStorage","setItem"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,O;;ACVA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;;;;;;;;;;;;;;;;;;IC3BqBA,O,GAGnB,uBAAyC;AAAA,MAA3BC,IAA2B,QAA3BA,GAA2B;AAAA,MAAtBC,IAAsB,QAAtBA,GAAsB;AAAA,MAAjBC,QAAiB,QAAjBA,OAAiB;AAAA,MAARC,IAAQ,QAARA,IAAQ;;AAAA;;AAAA;;AAAA,qCAOrB,UAACH,GAAD,EAAMC,GAAN,EAAWC,OAAX,EAAuB;AACzC,QAAME,YAAY,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,MAAiBN,GAAG,GAAGD,GAAvB,CAAX,IAA0CA,GAA/D;AAEAE,WAAO,CAACM,GAAR,CAAY,UAAAC,IAAI;AAAA,aAAIA,IAAI,KAAKL,YAAb;AAAA,KAAhB;AAEAA,gBAAY,KAAKF,OAAjB,GAA2BE,YAA3B,GAA0CA,YAAY,GAAG,CAAzD;AACD,GAbwC;;AAAA,kCAexB,YAAM,CAAE,CAfgB;;AACvC,OAAKM,SAAL,CAAeV,IAAf,EAAoBC,IAApB,EAAyBC,QAAzB;AAEAS,cAAY,CAACC,OAAb,CAAqB,SAArB,EAAgC,EAAhC;AACAD,cAAY,CAACC,OAAb,CAAqB,MAArB,EAA6B,EAA7B;AACD,C;;;;;;;;;;;;ACnBH;AACA;AACA;AACA,iEAAsD,kBAAkB;AACxE;AACA,0DAA+C,cAAc;AAC7D,a;;;;;ACNA;AACA;AACA;AACA;AACA,mDAAwC,gCAAgC;AACxE;AACA,a","file":"randoml.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"RandoML\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"RandoML\"] = factory();\n\telse\n\t\troot[\"RandoML\"] = factory();\n})(global, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n\n \t// the startup function\n \tfunction startup() {\n \t\t// Load entry module and return exports\n \t\treturn __webpack_require__(\"./src/randoml.ts\");\n \t};\n \t// initialize runtime\n \truntime(__webpack_require__);\n\n \t// run startup\n \treturn startup();\n","import Brain from 'brain.js';\n\ninterface Options {\n  min?: number;\n  max?: number;\n  exclude?: [number];\n  held?: [number];\n  startQueue?: void;\n  endQueue?: void;\n}\n\nexport default class RandoML<Options> {\n  brain: any;\n\n  constructor({ min, max, exclude, held }) {\n    this.randomize(min, max, exclude);\n\n    localStorage.setItem('exclude', '');\n    localStorage.setItem('held', '');\n  }\n\n  private randomize = (min, max, exclude) => {\n    const randomNumber = Math.floor(Math.random() * (max - min)) + min;\n\n    exclude.map(item => item !== randomNumber);\n\n    randomNumber !== exclude ? randomNumber : randomNumber + 1;\n  };\n\n  private neural = () => {};\n}\n","// define __esModule on exports\n__webpack_require__.r = function(exports) {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","// define getter function for harmony exports\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\n__webpack_require__.d = function(exports, name, getter) {\n\tif(!hasOwnProperty.call(exports, name)) {\n\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n\t}\n};"],"sourceRoot":""}